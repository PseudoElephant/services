use serde::{Deserialize, Serialize};
use uuid::Uuid;

#[derive(Serialize, Deserialize, Debug)]
#[serde(rename_all = "snake_case")]
/// Contains data for a given secret
pub struct Secret {
    /// secret_id will be generated by default
    pub secret_id: Option<Uuid>,
    /// user_id is optional, used to track the user creating the secrets
    pub user_id: Option<Uuid>,
    /// the secret message
    pub message: String,
    /// number of likes for the given secret
    pub likes: Option<u32>,
    /// number of dislikes for the given secret
    pub dislikes: Option<u32>,
}

/// creates a new secret, and initializes the secret with proper default values
pub fn new(message: String, user_id: Option<String>) -> Secret {
    let id = uuid::Uuid::parse_str(user_id.unwrap_or_default().as_str());

    Secret {
        secret_id: Some(uuid::Uuid::new_v4()),
        user_id: Some(id.unwrap_or(uuid::Uuid::new_v4())),
        message: message,
        likes: Some(0),
        dislikes: Some(0),
    }
}

impl Default for Secret {
    fn default() -> Secret {
        return new("".to_string(), None);
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_new() {
        let secret = new("Hello World!".to_string(), None);
        assert_eq!(0, secret.dislikes.unwrap());
        assert_eq!(0, secret.likes.unwrap());
        assert_eq!("Hello World!", secret.message);
        assert_eq!(
            uuid::Uuid::default().to_string(),
            secret.user_id.unwrap().to_string()
        );
        assert_ne!(
            uuid::Uuid::default().to_string(),
            secret.secret_id.unwrap().to_string()
        );
    }

    #[test]
    fn test_new_with_user_id() {
        let id = uuid::Uuid::new_v4();
        let secret = new("Hello World!".to_string(), Some(id.to_string()));

        assert_eq!(0, secret.dislikes.unwrap());
        assert_eq!(0, secret.likes.unwrap());
        assert_eq!("Hello World!", secret.message);
        assert_eq!(id.to_string(), secret.user_id.unwrap().to_string());
        assert_ne!(
            uuid::Uuid::default().to_string(),
            secret.secret_id.unwrap().to_string()
        );
    }
}
